(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{371:function(a,s,t){"use strict";t.r(s);var r=t(3),n=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jvm内存区域详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存区域详解"}},[a._v("#")]),a._v(" JVM内存区域详解")]),a._v(" "),s("h2",{attrs:{id:"_1-运行时数据区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-运行时数据区"}},[a._v("#")]),a._v(" 1 运行时数据区")]),a._v(" "),s("p",[a._v("Java内存区域就是运行时数据区。")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.png",alt:"JVM内存区域"}}),a._v(" "),s("p",[a._v("按照线程私有和共享进行区分的话。私有部分包含：程序计数器、虚拟机栈、本地方法栈；共享部分包含：堆、方法区")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("程序计数器")]),a._v("：线程私有，用于记录当前线程下条指令的位置，不会因为线程的切换而忘记当前线程所执行到的位置；分支、循环、跳转、异常处理、线程恢复都需要程序计数器来完成。程序计数器占的空间非常小，并且不会出现 "),s("code",[a._v("OutOfMemeryError")]),a._v("，他会随着线程创建而创建，线程的结束而结束。")]),a._v(" "),s("li",[s("strong",[a._v("虚拟机栈")]),a._v("：线程私有，由一个个栈帧组成，每一个栈帧对应一个方法，每一个方法的调用到执行完成对应着栈帧的入栈和出栈，每个栈帧都包含局部变量表、操作数栈、动态链接、方法返回地址。会出现 "),s("code",[a._v("StackOverFlowError")]),a._v(" 和 OutOfMemeryError` 两种错误。")]),a._v(" "),s("li",[s("strong",[a._v("本地方法栈")]),a._v("：线程私有，虚拟机栈执行的是Java方法，本地方法栈则使用虚拟机的Native方法。本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放本地方法的局部变量表、操作数栈、动态链接、出口信息。也会出现 "),s("code",[a._v("StackOverFlowError")]),a._v(" 和"),s("code",[a._v("OutOfMemoryError")]),a._v(" 两种错误。")]),a._v(" "),s("li",[s("strong",[a._v("堆")]),a._v("：线程共享，存放对象实例，几乎所有对象实例以及数组都在这里分配内存。堆主要分为两部分：新生代（Eden、Survivor）和老生代（Old），分为两部分有利于垃圾回收，因为垃圾回收的主要区域就是堆。")]),a._v(" "),s("li",[s("strong",[a._v("方法区")]),a._v("：用于存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")])]),a._v(" "),s("h3",{attrs:{id:"_1-1-程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-程序计数器"}},[a._v("#")]),a._v(" 1.1 程序计数器")]),a._v(" "),s("p",[a._v("线程私有，用于记录当前线程下条指令的位置，不会因为线程的切换而忘记当前线程所执行到的位置；分支、循环、跳转、异常处理、线程恢复都需要程序计数器来完成。程序计数器占的空间非常小，并且不会出现 "),s("code",[a._v("OutOfMemeryError")]),a._v("，他会随着线程创建而创建，线程的结束而结束。")]),a._v(" "),s("h3",{attrs:{id:"_1-2-虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-虚拟机栈"}},[a._v("#")]),a._v(" 1.2 虚拟机栈")]),a._v(" "),s("p",[a._v("线程私有，由一个个栈帧组成，每一个栈帧对应一个方法，每一个方法的调用到执行完成对应着栈帧的入栈和出栈，每个栈帧都包含局部变量表、操作数栈、动态链接、方法返回地址。会出现 "),s("code",[a._v("StackOverFlowError")]),a._v(" 和 "),s("code",[a._v("OutOfMemeryError")]),a._v(" 两种错误。")]),a._v(" "),s("p",[s("code",[a._v("StackOverFlowError")]),a._v("：线程请求的栈深度大于虚拟机所运行的最大深度。")]),a._v(" "),s("p",[s("code",[a._v("OutOfMemoryError")]),a._v("：扩展栈容量无法申请到足够的内存时。HotSpot虚拟机不支持动态扩展栈，所以不会出现这个异常。")]),a._v(" "),s("h4",{attrs:{id:"局部变量表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[a._v("#")]),a._v(" 局部变量表")]),a._v(" "),s("p",[a._v("主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。")]),a._v(" "),s("h4",{attrs:{id:"动态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[a._v("#")]),a._v(" 动态链接")]),a._v(" "),s("p",[a._v("主要服务一个方法需要调用其他方法的场景。在 Java 源文件被编译成字节码文件时，所有的变量和方法引用都作为符号引用保存在 Class 文件的常量池里。当一个方法要调用其他方法，需要将常量池中指向方法的符号引用转化为其在内存地址中的直接引用。动态链接的作用就是为了将符号引用转换为调用方法的直接引用。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.png",alt:"image-20220715162225937"}})]),a._v(" "),s("h4",{attrs:{id:"操作数栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈"}},[a._v("#")]),a._v(" 操作数栈")]),a._v(" "),s("p",[a._v("主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。")]),a._v(" "),s("h4",{attrs:{id:"方法返回地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法返回地址"}},[a._v("#")]),a._v(" 方法返回地址")]),a._v(" "),s("p",[a._v("返回方法被调用的位置。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-本地方法栈"}},[a._v("#")]),a._v(" 1.3 本地方法栈")]),a._v(" "),s("p",[a._v("线程私有，虚拟机栈执行的是 Java 方法，本地方法栈则使用虚拟机的 Native 方法。本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放本地方法的局部变量表、操作数栈、动态链接、出口信息。也会出现 "),s("code",[a._v("StackOverFlowError")]),a._v(" 和 "),s("code",[a._v("OutOfMemoryError")]),a._v(" 两种错误。")]),a._v(" "),s("p",[s("code",[a._v("StackOverFlowError")]),a._v("：线程请求的栈深度大于虚拟机所运行的最大深度。")]),a._v(" "),s("p",[s("code",[a._v("OutOfMemoryError")]),a._v("：扩展栈容量无法申请到足够的内存时。HotSpot虚拟机不支持动态扩展栈，所以不会出现这个异常。")]),a._v(" "),s("h3",{attrs:{id:"_1-4-堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-堆"}},[a._v("#")]),a._v(" 1.4 堆")]),a._v(" "),s("p",[a._v("线程共享，存放对象实例，几乎所有对象实例以及数组都在这里分配内存。堆主要分为两部分：新生代（Eden、Survivor）和老生代（Old），分为两部分有利于垃圾回收，因为垃圾回收的主要区域就是堆。")]),a._v(" "),s("p",[a._v("堆最容易出现的就是 "),s("code",[a._v("OutOfMemoryError")]),a._v(" 错误，并且出现这种错误之后的表现形式还会有几种，比如：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("java.lang.OutOfMemoryError: GC Overhead Limit Exceeded")]),a._v(" ： 当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。")]),a._v(" "),s("li",[s("code",[a._v("java.lang.OutOfMemoryError: Java heap space")]),a._v(" ：假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。")])]),a._v(" "),s("p",[s("strong",[a._v("JVM 堆的参数设置")])]),a._v(" "),s("p",[a._v("🔑 "),s("code",[a._v("-Xms")]),a._v(" 等价于 "),s("code",[a._v("-XX:InitialHeapSize")])]),a._v(" "),s("p",[a._v("表示初始化堆大小，一旦对象容量超过堆的初始容量，JAVA 堆会自动扩容到 -Xmx 大小。默认值为物理内存的 1/64。")]),a._v(" "),s("p",[a._v("🔑 "),s("code",[a._v("-Xmx")]),a._v(" 等价于 "),s("code",[a._v("-XX:MaxHeapSize")])]),a._v(" "),s("p",[a._v("表示堆可以扩展到的最大值，在很多情况下，通常将 -Xms 和 -Xmx 设置成一样的，因为当堆不够用而发生扩容时，会发生内存抖动影响程序运行时的稳定性。默认值为物理内存的 1/4。")]),a._v(" "),s("p",[a._v("将堆内存设置为 20MB："),s("code",[a._v("-Xms20m -Xmx20m")])]),a._v(" "),s("h3",{attrs:{id:"_1-5-方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-方法区"}},[a._v("#")]),a._v(" 1.5 方法区")]),a._v(" "),s("p",[a._v("用于存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),a._v(" "),s("ul",[s("li",[a._v("JDK1.8：在元空间内，直接使用内存，内存受系统的限制。")]),a._v(" "),s("li",[a._v("JDK1.7：方法区与堆地址相连，实现方式是永久代")])]),a._v(" "),s("h2",{attrs:{id:"_2-常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见问题"}},[a._v("#")]),a._v(" 2 常见问题")]),a._v(" "),s("h3",{attrs:{id:"java堆溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java堆溢出"}},[a._v("#")]),a._v(" Java堆溢出")]),a._v(" "),s("p",[a._v("🔶 "),s("strong",[a._v("原理")]),a._v("：Java堆用于存储对象实例，通过不断地创建对象，并且保证创建的对象不会被垃圾回收机制回收，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常")]),a._v(" "),s("p",[a._v("🔶 "),s("strong",[a._v("设置JVM参数")]),a._v("：堆的最大值和最小值均设置为 1MB，通过参数 "),s("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError")]),a._v(" 可以让虚拟机在出现内存溢出异常的时候 Dump 出当前的内存堆转存快照以便事后分析")]),a._v(" "),s("div",{staticClass:"language-VM line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-Xms1m -Xmx1m -XX:+HeapDumpOnOutOfMemoryError\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("🔶 Java代码")])]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("🔶 "),s("strong",[a._v("控制台输出")])]),a._v(" "),s("div",{staticClass:"language-Output line-numbers-mode"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[a._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('java.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid25616.hprof ...\nHeap dump file created [2466309 bytes in 0.006 secs]\nException in thread "main" java.lang.OutOfMemoryError: Java heap space\n')])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("异常为 "),s("code",[a._v("java.lang.OutOfMemoryError: Java heap space")]),a._v("，表示堆溢出。")]),a._v(" "),s("h3",{attrs:{id:"虚拟机栈和本地方法栈溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈和本地方法栈溢出"}},[a._v("#")]),a._v(" 虚拟机栈和本地方法栈溢出")]),a._v(" "),s("p",[a._v("🔶 "),s("strong",[a._v("原理")]),a._v("：通过递归不断调用，相当于往栈种不断加入栈帧，直到达到栈的最大值。")]),a._v(" "),s("p",[a._v("🔶 "),s("strong",[a._v("设置JVM参数")]),a._v("：设置对空间大小。")]),a._v(" "),s("div",{staticClass:"language-VM line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-Xss128k\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("🔶 Java代码")])]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dfs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dfs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),a._v(" oomTest "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        oomTest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dfs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("🔶 "),s("strong",[a._v("控制台输出")])]),a._v(" "),s("div",{staticClass:"language-Output line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Exception in thread "main" java.lang.StackOverflowError\n\tat test.OOMTest.dfs(OOMTest.java:18)\n\t...后续异常堆栈信息省略\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"方法区溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区溢出"}},[a._v("#")]),a._v(" 方法区溢出")]),a._v(" "),s("h3",{attrs:{id:"本地方法栈有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈有什么用"}},[a._v("#")]),a._v(" 本地方法栈有什么用")]),a._v(" "),s("p",[a._v("本地方法栈与虚拟机栈所发挥的作用非常相似，区别只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则是为了虚拟机使用本地方法服务。")]),a._v(" "),s("h3",{attrs:{id:"没有程序计数器会怎么样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有程序计数器会怎么样"}},[a._v("#")]),a._v(" 没有程序计数器会怎么样")]),a._v(" "),s("p",[a._v("Java程序中的流程控制无法得到正确的控制，多线程也无法正确的轮换。")]),a._v(" "),s("h3",{attrs:{id:"类存放在哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类存放在哪里"}},[a._v("#")]),a._v(" 类存放在哪里")]),a._v(" "),s("p",[a._v("方法区，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。")]),a._v(" "),s("h3",{attrs:{id:"局部变量存放在哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部变量存放在哪里"}},[a._v("#")]),a._v(" 局部变量存放在哪里")]),a._v(" "),s("p",[a._v("虚拟机栈，线程私有的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。")]),a._v(" "),s("p",[a._v("局部变量表存放了编译期可知的各种Java虚拟机基本数据、对象引用和 returnAddress 类型。")]),a._v(" "),s("h3",{attrs:{id:"方法区和运行时常量池溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区和运行时常量池溢出"}},[a._v("#")]),a._v(" 方法区和运行时常量池溢出")]),a._v(" "),s("p",[a._v("运行时常量池是方法区的一部分。")]),a._v(" "),s("p",[s("code",[a._v("String::intern()")]),a._v("是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此 String 对象的字符串，则返回代表池中整个字符串的 String 对象的引用；否则，会将此 String 对象包含的字符串添加到常量池，并且返回此 String 对象的引用。")])])}),[],!1,null,null,null);s.default=n.exports}}]);