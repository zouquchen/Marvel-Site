(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{399:function(t,n,a){"use strict";a.r(n);var s=a(3),o=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"springboot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot"}},[t._v("#")]),t._v(" SpringBoot")]),t._v(" "),n("h4",{attrs:{id:"_1-springboot的核心注解-springbootapplication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-springboot的核心注解-springbootapplication"}},[t._v("#")]),t._v(" 1 SpringBoot的核心注解@SpringBootApplication")]),t._v(" "),n("p",[t._v("SpringBoot在启动时会扫描外部引用jar包中的"),n("code",[t._v("META-INF/spring.factories")]),t._v("文件，将文件中配置的类型信息加载到Spring容器，并执行类定义的各种操作。对于外部jar来说，只需按照SpringBoot定义的标准，就能将自己的功能装置进Spring Boot。")]),t._v(" "),n("p",[t._v("SpringBoot的核心注解：SpringBootApplication，它可以看作"),n("code",[t._v("@Configuration")]),t._v(", "),n("code",[t._v("@EnableAutoConfiguration")]),t._v(", "),n("code",[t._v("@ComponentScan")]),t._v("注解的集合，这三个注解的作用分别是：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("@EnableAutoConfiguration")]),t._v("：启动SpringBoot的自动配置")]),t._v(" "),n("li",[n("code",[t._v("@Configuration")]),t._v("：允许在上下文中注册额外的bean或者导入其他配置类")]),t._v(" "),n("li",[n("code",[t._v("@ComponentScan")]),t._v("：扫描被@Component（@Service、@Controller）注解的bean，注解默认会扫描启动类所在的包下所有的类，可以自定义不扫描某些bean。")])]),t._v(" "),n("h4",{attrs:{id:"_2-enableautoconfiguration-实现自动装配的核心注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-enableautoconfiguration-实现自动装配的核心注解"}},[t._v("#")]),t._v(" 2 @EnableAutoConfiguration：实现自动装配的核心注解")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigurationPackage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//作用：将main包下的所有组件注册到容器中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationImportSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加载自动装配类 xxxAutoconfiguration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" ENABLED_OVERRIDE_PROPERTY "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.boot.enableautoconfiguration"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exclude")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("excludeName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("核心功能的实现是通过"),n("code",[t._v("@AutoConfigurationImportSelector")]),t._v("类。")]),t._v(" "),n("h4",{attrs:{id:"_3-autoconfigurationimportselector-加载自动装配类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-autoconfigurationimportselector-加载自动装配类"}},[t._v("#")]),t._v(" 3 AutoConfigurationImportSelector：加载自动装配类")]),t._v(" "),n("p",[t._v("获取所有符合条件的类的全限定类名，这些类需要被加载到IoC容器中。")]),t._v(" "),n("h4",{attrs:{id:"_4-对springboot自动装配的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-对springboot自动装配的理解"}},[t._v("#")]),t._v(" 4 对SpringBoot自动装配的理解？")]),t._v(" "),n("p",[t._v("SpringBoot项目有一个pom.xml，我们需要在里面配置一些需要的启动器starter，后面会自动将这些starter的依赖装配进来，比如说"),n("code",[t._v("spring-boot-starter-web")]),t._v("。")]),t._v(" "),n("p",[t._v("在这个pom.xml中也可以看到它的父项目"),n("code",[t._v("spring-boot-parent")]),t._v("，里面进行了一些配置，比如说配置文件application.yaml或application.properties的所在目录。它的父项目是"),n("code",[t._v("spring-boot-dependencies")]),t._v("，里面定义了当前springboot版本所自动装配依赖的版本，这样我们在选择依赖的时候就不需要指定版本了。")]),t._v(" "),n("p",[t._v("SpringBoot有一个主启动类，需要注解"),n("code",[t._v("@SpringBootApplication")]),t._v("，自动装配的实现主要依赖这个注解来实现。其中包含了许多其他的注解，而这些注解实现的主要功能就是：")]),t._v(" "),n("ul",[n("li",[t._v("扫描启动类目录下的文件，如注解了@Component、@Service、@Controller的bean。")]),t._v(" "),n("li",[t._v("加载自己的配置")]),t._v(" "),n("li",[t._v("自动加载的配置，通过一系列的操作读取META-INF/spring.factorier下的所有的自动加载配置类，对他们进行遍历加载。但并不是所有的类都会进行加载，在xxxAutoConfiguration中会有@ConditionalOnXXX，只有符合条件的才会被加载。")])])])}),[],!1,null,null,null);n.default=o.exports}}]);